#!/bin/bash
set -uo pipefail

# -------------------------------------------------------------------------------------------------
# ** ALL COMMANDS IN THIS SCRIPT MUST BE IDEMPOTENT **
# -------------------------------------------------------------------------------------------------
# This file will be executed after a call to `chezmoi apply` or `chezmoi update` anytime the source 
# `run_once_install-packages.sh.tmpl` changes; because this file can be run multiple times, be sure 
# all commands/tasks in this file can safely be run more than once.
# -------------------------------------------------------------------------------------------------
# * Use relative paths to find binaries (e.g. ~/bin/xyz) and don't assume anything is in PATH
# * If you add/remove packages be sure to reflect it in `~/bin/udi-doctor`.
# -------------------------------------------------------------------------------------------------
# If you want to force-run this script after you've updated configs:
#   chezmoi state delete-bucket --bucket=scriptState
#   chezmoi apply
# -------------------------------------------------------------------------------------------------

RED='\033[0;31m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

{{- if (index . "github") }}
{{-   if (index . "github" "user") }}
{{-     if (index . "github" "user" "prime" "pat") }}
export GITHUB_API_TOKEN="{{ .github.user.prime.pat }}"
{{-     else}}
# '.github.user.prime.pat' required in chezmoi.toml if this is desired:
#export GITHUB_API_TOKEN="..."
{{-     end}}
{{-   end}}
{{- end}}

UDI_PKGX_LOG=~/.udi-intall-pkgx-packages.sh.log
touch $UDI_PKGX_LOG
echo "--- `date` ---" >> $UDI_PKGX_LOG
printf "Installing pkgx-managed packages (tail -f ~/.udi-intall-pkgx-packages.sh.log)..."

# see https://pkgx.dev/pkgs/ for existing packages;
pkgx_user_packages=""
{{- if (index . "packages") }}
{{-   if (index . "packages" "pkgx" "user") }}
{{-     if (index . "packages" "pkgx" "user" "auto_install") }}
# set this so that `pkgx` and other commands that need to access the GitHub API can use it (helps
# prevent GitHub rate-limiting based issues)
pkgx_user_packages="{{ .packages.pkgx.user.auto_install | join " " }}"
{{-     end}}
{{-   end}}
{{- end}}

# Install binaries using pkgx
for pkg in $pkgx_user_packages {{ .packages.pkgx.auto_install | join " " }}; do
    ~/bin/pkgx install $pkg@latest >> $UDI_PKGX_LOG 2>&1
done

rtx_user_packages=""
{{- if (index . "packages") }}
{{-   if (index . "packages" "rtx" "user") }}
{{-     if (index . "packages" "rtx" "user" "auto_install") }}
# set this so that `xtx` and other commands that need to access the GitHub API can use it (helps
# prevent GitHub rate-limiting based issues)
rtx_user_packages="{{ .packages.rtx.user.auto_install | join " " }}"
{{-     end}}
{{-   end}}
{{- end}}


# Install binaries using rtx
for rtx in $rtx_user_packages {{ .packages.rtx.auto_install | join " " }}; do
    ~/bin/rtx install $rtx@latest -y >> $UDI_PKGX_LOG 2>&1
    ~/bin/rtx use -g $rtx@latest >> $UDI_PKGX_LOG 2>&1
done


steampipe_user_packages=""
{{- if (index . "packages") }}
{{-   if (index . "packages" "steampipe" "user") }}
{{-     if (index . "packages" "steampipe" "user" "plugin_install") }}
# set this so that `xtx` and other commands that need to access the GitHub API can use it (helps
# prevent GitHub rate-limiting based issues)
steampipe_user_packages="{{ .packages.steampipe.user.plugin_install | join " " }}"
{{-     end}}
{{-   end}}
{{- end}}


# Install binaries using steampipe
for steampipe in $steampipe_user_packages {{ .packages.steampipe.plugin_install | join " " }}; do
    ~/bin/steampipe plugin install "$plugin" -y >> $UDI_PKGX_LOG 2>&1
    ~/bin/steampipe plugin install "$plugin" >> $UDI_PKGX_LOG 2>&1
done


# Deno was already installed by `pkgx` but `deno` must be in a "normal" path for VS Code, etc.
rm -f $HOME/bin/deno && ln -s $HOME/.local/bin/deno $HOME/bin/deno    

export PATH=$PATH:~/bin

# https://api.github.com/repos/hayd/deno-udd (`udd`) is a Deno package to update dependencies
export UDD_VERSION=`curl -fsSL https://api.github.com/repos/hayd/deno-udd/tags | jq '.[0].name' -r`
DENO_INSTALL_ROOT=~ $HOME/bin/deno install -A -f -n udd https://deno.land/x/udd@${UDD_VERSION}/main.ts >> $UDI_PKGX_LOG 2>&1

# Netspective Labs SQLa `pgpass.ts` parses and allows PostgreSQL connection lookups
export SQLa_VERSION=`curl -fsSL https://api.github.com/repos/netspective-labs/sql-aide/tags | jq '.[0].name' -r`
DENO_INSTALL_ROOT=~ $HOME/bin/deno install -A -f --unstable https://raw.githubusercontent.com/netspective-labs/sql-aide/${SQLa_VERSION}/lib/postgres/pgpass/pgpass.ts >> $UDI_PKGX_LOG 2>&1
chmod 600 ~/.pgpass

chmod +x ~/bin/chezmoi

curl -fsSL "https://raw.githubusercontent.com/pnikosis/semtag/master/semtag" > ~/bin/git-semtag
chmod +x ~/bin/git-semtag
curl -fsSL "https://raw.githubusercontent.com/fboender/multi-git-status/master/mgitstatus" > ~/bin/git-mgitstatus
chmod +x ~/bin/git-mgitstatus
curl -fsSL "https://raw.githubusercontent.com/kamranahmedse/git-standup/master/git-standup" > ~/bin/git-standup
chmod +x ~/bin/git-standup

# https://github.com/paulfitz/daff aligns and compares tables; `daff` authors don't create a binary distribution so we built our own and download it from our repo
curl -fsSL "https://github.com/netspective-studios/redistributables/raw/master/linux/daff-1.3.46-haxe2cpp-amd64-debug" > ~/bin/daff
chmod +x ~/bin/daff

echo "done."
printf "Inspect ${YELLOW}$UDI_PKGX_LOG${NC}: ${RED}`grep error $UDI_PKGX_LOG | wc -l`${NC} potential error messages\n"

# Execute ansible playbooks for UDIaaS deployment
cd $HOME
ANSIBLE_LOCALHOST_WARNING=false ansible-playbook ansible/main.yml
